#!/bin/bash

SCRIPT_NAME=$(basename "$0")

function usage() {
  cat <<EOF
Name:
  $SCRIPT_NAME - A script to manage Trello cards.

Description:
  This script allows you to create Trello cards, set up assignee IDs, and update your Trello API key and token.

Usage: $SCRIPT_NAME [OPTIONS] "New card name"

Options:
  -s, --setup-id    Set up assignee ID for automatic assignment of new cards
  -u, --update-key  Update Trello API key & token
  -r, --remove      Remove a card that contains a given string
  -h, --help        Display this help message

Examples:
  $SCRIPT_NAME "New card name"                   # Create a new card with name "New card name"
  $SCRIPT_NAME --setup-id "Kangwook"             # Set up assignee ID for automatic assignment
  $SCRIPT_NAME --update-key                      # Update Trello API key & token
  $SCRIPT_NAME --remove "PS-106"                 # Remove a card that contains "PS-106"
EOF
}

# check the number of arguments
if [[ $# -eq 0 ]]; then
    usage
    exit 1
fi

# check if jq is installed
if ! command -v jq &> /dev/null; then
    echo "Error: jq is not installed."
    echo "Please install jq using 'brew install jq' and try again."
    exit 1
fi

function check_config_file() {
# Get values from config.json
CONFIG_FILE=~/.${SCRIPT_NAME}/config.json
if [[ ! -f $CONFIG_FILE ]]; then
    echo "Config file does not exist. Please create it using '$SCRIPT_NAME --update-key' and try again."
    exit 1
fi

APIKey=$(jq -r '.APIKey' $CONFIG_FILE)
APIToken=$(jq -r '.APIToken' $CONFIG_FILE)
BoardID=$(jq -r '.BoardID' $CONFIG_FILE)
MemberID=$(cat ~/.${SCRIPT_NAME}/id 2>/dev/null)
}

function num_of_cards() {
  # fetch all the cards in a given list
  all_cards=$(curl --silent --request GET \
  --url "https://api.trello.com/1/boards/${BoardID}/cards?key=${APIKey}&token=${APIToken}" \
  --header 'Accept: application/json')

  # check if response is an appropriate JSON
  echo "$response" | jq empty &>/dev/null
  if [ $? -ne 0 ]; then
    echo "Error: Invalid JSON response for all cards API"
    return 1
  fi

  echo $all_cards | jq '. | length'
}

function fetch_list_ids() {
    # fetch all the lists
    response=$(curl --silent --request GET \
      --url "https://api.trello.com/1/boards/${BoardID}/lists?key=${APIKey}&token=${APIToken}" \
      --header 'Accept: application/json')

    # fetch the ID of the To Do list
    echo "$response" | jq -r '.[] | select(.name == "To Do").id' | tr -d '\r'
}

function create_card() {
# Call function and capture output in an array
IFS=$'\n' read -d '' -r -a output_array < <(fetch_list_ids && printf '\0')
TodoListID="${output_array}"

# calculate the total number of the cards in the board
total_number=$(( 1 + $(num_of_cards) ))

# encode URL using perl's sprintf
message="[PS-$total_number] ${1}"
encoded_url=$( echo -n "$message" | perl -pe 's/([^a-zA-Z0-9_.-])/sprintf("%%%02X", ord($1))/ge' )

# create a new card with a new ticket number
create_card=$(curl --silent --request POST \
  --url "https://api.trello.com/1/cards?idList=${TodoListID}&key=${APIKey}&token=${APIToken}" \
  --header 'Accept: application/json' \
  --data "name=$encoded_url&idMembers=$MemberID" \
  -o /dev/null \
  -w "%{http_code}")

if [[ $create_card == 2* ]]; then
  echo "Successfully created a new card in Trello: ${message}"
else
  echo "Failed to create a new card. Please contact the administrator."
fi
}

function update_key() {
  echo "You are updating the Trello API key, token & the board ID."
  echo "WARN: If it is invalid, you can't use $SCRIPT_NAME anymore. Please ask the administrator for specific values to input before updating."

  # ask the user if they have the specific values
  read -p "Have you obtained the specific values from the administrator? (Y/n) " yn
  [[ $yn =~ ^[Yy] ]] || { echo "Please contact the administrator to get the values."; exit 1; }

  # read the values from the user
  read -p "Input a new API key? " api_key
  read -p "Input a new API token? " api_token
  read -p "Input a new Board ID? " board_id

  # save it as a JSON format file
  mkdir -p ~/.${SCRIPT_NAME}
  echo "{
  \"APIKey\": \"$api_key\",
  \"APIToken\": \"$api_token\",
  \"BoardID\": \"$board_id\"
}" > $CONFIG_FILE

  echo "The content of a new config file: "
  cat $CONFIG_FILE
}

function setup_id() {
  # get the full member list
  response=$(curl -s "https://api.trello.com/1/boards/${BoardID}/members?key=${APIKey}&token=${APIToken}")

  # check if it is a proper JSON message
  echo "$response" | jq . > /dev/null 2>&1

  if [ $? -eq 0 ]; then
    # get the id of a given name and save it to a file
    mkdir -p ~/.${SCRIPT_NAME}
    OUTPUT_FILE=~/.${SCRIPT_NAME}/id
    echo "$response" | jq -r --arg name "$1" '.[] | select((.fullName | ascii_downcase) | contains($name | ascii_downcase)) | .id' > $OUTPUT_FILE

    # show the content of the file
    echo "Successfully saved your ID. Saved ID: "
    cat $OUTPUT_FILE
  else
    echo "Failed to get your ID. Please contact the administrator."
  fi
}

function remove_card() {
  SCRIPT_PATH="$(realpath $0)"
  PARENT_DIR="$(dirname $(dirname $SCRIPT_PATH))"

  export APIKey APIToken BoardID
  processed_str=$(echo "$1" | tr '[:lower:]' '[:upper:]')

  echo "Trying to delete \"$processed_str\"..."
  "$PARENT_DIR"/change_card_status.sh "$processed_str" "Deleted"
}

# Parse options and arguments
while [[ $# -gt 0 ]]; do
  key="$1"
  case $key in
    -s|--setup-id)
      setup_id "$2"
      shift 2
      ;;
    -u|--update-key)
      update_key
      shift
      ;;
    -r|--remove)
      check_config_file
      remove_card "$2"
      shift 2
      ;;
    -h|--help)
      usage
      exit 0
      ;;
    *) # Default case: If no option, then it's the card name
      check_config_file
      create_card "$1"
      shift
      ;;
  esac
done
